{"ast":null,"code":"var _jsxFileName = \"/home/aytac/repos/ataspor/pages/mannschaften.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Players from '../components/players';\nimport Navi from '../components/navi';\n\nconst client = require('contentful').createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n\nfunction Mannschaften() {\n  async function fetchPlayerEntries() {\n    const entries = await client.getEntries({\n      'content_type': 'players'\n    });\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n\n  async function fetchSettings() {\n    // Fetch all results where `fields.slug` is equal to the `slug` param\n    const result = await client.getEntries({\n      content_type: \"settings\"\n    }).then(response => response.items); // Since `slug` was set to be a unique field, we can be confident that\n    // the only result in the query is the correct post.\n\n    const settings = result.pop(); // If nothing was found, return an empty object for props, or else there would\n    // be an error when Next tries to serialize an `undefined` value to JSON.\n\n    if (!settings) {\n      return {\n        props: {}\n      };\n    } // Return the post as props\n\n\n    return {\n      props: {\n        settings\n      }\n    };\n  }\n\n  const {\n    0: players,\n    1: setImageLinks\n  } = useState([]);\n  const {\n    0: setting,\n    1: setSettings\n  } = useState([]); //useEffect hook retrieves posts on initial load.\n\n  useEffect(() => {\n    async function getPlayers() {\n      const allPlayers = await fetchPlayerEntries();\n      console.log(allPlayers);\n      var teams = {\n        MainTeam: [],\n        SeniorTeam: []\n      };\n      allPlayers.forEach(player => {\n        console.log(player);\n        console.log(teams.MainTeam);\n\n        if (player.fields.mannschaft == \"1. Mannschaft\") {\n          teams.MainTeam.push(player);\n        }\n\n        if (player.fields.mannschaft == \"Senioren 30+\") {\n          teams.SeniorTeam.push(player);\n        }\n      });\n      console.log(teams);\n      setImageLinks([...allPlayers]);\n    }\n\n    async function getSettings() {\n      const allSettings = await fetchSettings();\n      console.log(allSettings);\n      setSettings([...settings]);\n    }\n\n    getPlayers();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Spieler\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://css.zeit.sh/v1.css\",\n    type: \"text/css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  })), setting.length > 0 ? setting.map(s => __jsx(Navi, {\n    activePage: \"Mannschaft\",\n    logo: s.fields.logo.fields.file.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }\n  })) : null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"1. Mannschaft\"), players.length > 0 ? players.map(p => __jsx(Players, {\n    key: p.fields.id,\n    name: p.fields.name,\n    image: p.fields.image,\n    nummer: p.fields.nummer,\n    mannschaft: p.fields.mannschaft,\n    active: p.fields.active,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })) : null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Senioren\"));\n}\n\nexport default Mannschaften;","map":{"version":3,"sources":["/home/aytac/repos/ataspor/pages/mannschaften.js"],"names":["useEffect","useState","Head","Players","Navi","client","require","createClient","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","Mannschaften","fetchPlayerEntries","entries","getEntries","items","console","log","contentType","name","fetchSettings","result","content_type","then","response","settings","pop","props","players","setImageLinks","setting","setSettings","getPlayers","allPlayers","teams","MainTeam","SeniorTeam","forEach","player","fields","mannschaft","push","getSettings","allSettings","length","map","s","logo","file","url","p","id","image","nummer","active"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport Head from 'next/head'\nimport Players from '../components/players'\nimport Navi from '../components/navi'\n\nconst client = require('contentful').createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n})\n\n\nfunction Mannschaften() {\n  async function fetchPlayerEntries() {\n    const entries = await client.getEntries({\n      'content_type': 'players'\n    })\n    if (entries.items) return entries.items\n    console.log(`Error getting Entries for ${contentType.name}.`)\n  }\n\n  async function fetchSettings(){\n      // Fetch all results where `fields.slug` is equal to the `slug` param\n      const result = await client\n      .getEntries({\n        content_type: \"settings\"\n      })\n      .then((response) => response.items)\n\n    // Since `slug` was set to be a unique field, we can be confident that\n    // the only result in the query is the correct post.\n    const settings = result.pop()\n\n    // If nothing was found, return an empty object for props, or else there would\n    // be an error when Next tries to serialize an `undefined` value to JSON.\n    if (!settings) {\n      return { props: {} }\n    }\n\n      // Return the post as props\n      return {\n        props: {\n          settings,\n        },\n      }\n  }\n\n  const [players, setImageLinks] = useState([])\n  const [setting, setSettings] = useState([])\n  //useEffect hook retrieves posts on initial load.\n  useEffect(() => {\n    async function getPlayers() {\n      const allPlayers = await fetchPlayerEntries()\n      console.log(allPlayers);\n      var teams = {MainTeam: [], SeniorTeam: []};\n      allPlayers.forEach( player => {\n        console.log(player);\n        console.log(teams.MainTeam);\n        if(player.fields.mannschaft==\"1. Mannschaft\"){\n            teams.MainTeam.push(player);\n        }\n        if(player.fields.mannschaft==\"Senioren 30+\"){\n            teams.SeniorTeam.push(player);\n        }\n    })\n    console.log(teams)\n      setImageLinks([...allPlayers])\n    }\n\n    async function getSettings(){\n      const allSettings = await fetchSettings();\n      console.log(allSettings);\n      \n      setSettings([...settings])\n    }\n\n    getPlayers()\n  }, [])\n\n  return (\n    <>\n      <Head>\n        <title>Spieler</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://css.zeit.sh/v1.css\"\n          type=\"text/css\" \n        />\n      </Head>\n      {\n        setting.length > 0\n        ? setting.map(s => (\n           <Navi activePage=\"Mannschaft\" logo={s.fields.logo.fields.file.url}></Navi>\n          ))\n        : null\n      }\n      <h1>1. Mannschaft</h1>\n      {players.length > 0\n        ? players.map(p => (\n            <Players\n              key={p.fields.id}\n              name={p.fields.name}\n              image={p.fields.image}\n              nummer={p.fields.nummer}\n              mannschaft={p.fields.mannschaft}\n              active={p.fields.active}\n            />\n          ))\n        : null}\n        <h1>Senioren</h1>\n    </>\n  )\n}\n\nexport default Mannschaften"]},"metadata":{},"sourceType":"module"}